import java.io.File;
import java.io.FileNotFoundException;
import java.util.Hashtable;
import java.util.Scanner;

// --== CS400 Spring 2023 File Header Information ==--
// Name: Ziqi Shen
// Email: zshen266@wisc.edu
// Team: BC red
// TA: Naman Gupta
// Lecturer: Gary Dahl
// Notes to Grader: None

/**
 * This class reads airport and route data from a csv file and attempts to load it in to a Graph.
 * In the csv file, each airport is stored as a single line of text, and each route is also 
 * stored as a single line of text. These fields are separated by a character delimiter: , .
 * 
 * @author Ziqi Shen
 */
public class AirportNetworkReaderDW implements AirportNetworkReaderInterface{

    /**
     * Loads Graph data from a .csv file, and only a .csv file, and attempts to load it in to a Graph
     * The Graph file is mannully generated by the author, and the format is as follows:
     * Nodes(Airport):   CODE [label="CODE,LOC,LAT,LONG"];
     * Edges(Route):     START -> END [len=Distance];
     * @param filename
     * @return An initialized graph with all of the nodes and edges loaded
     * @throws FileNotFoundException if the files does not exist
     * @throws IllegalArgumentException if the data is malformed
     */
    @Override
    public TwoModePathFinderInterface<AirportInterface, Double> readGraphFromFile(String filename) throws FileNotFoundException,IllegalArgumentException {
        Hashtable<String, AirportInterface> airportsTable = new Hashtable<>();
        File f = new File(filename);
        if (!f.exists()){
            f = new File("bin", filename);
            if (!f.exists()){
                throw new FileNotFoundException("File not found.");
            }
        }
        Scanner in = new Scanner(f); // mannully load graph file instead of using external library
        
        TwoModePathFinderInterface<AirportInterface, Double> graph = new TwoModePathFinderAE<AirportInterface, Double>();
        
        if(!in.hasNextLine()){
            System.out.println("The file is empty!\n");
            in.close();
            throw new IllegalArgumentException("The file is empty!");
        }
        String firstLine = in.nextLine();
        if(!firstLine.contains("digraph")){ // check if the file is a valid graph
            System.out.println("The file is not a valid graph!\n");
            in.close();
            throw new IllegalArgumentException("The file is not a valid graph!\n");
        }
            
        while (in.hasNextLine()) {
            String line = in.nextLine();
            if (line.contains("}")) { // end of file
                break;
            }
            else if ((!line.contains("->")) && line.contains("label=")){ // a node, contains no "->" with valide label
                String[] words = line.split("\"");
                if (words.length != 3) {
                    in.close();
                    this.malException();
                }
                words = words[1].split(",");
                if (words.length != 4) {
                    in.close();
                    this.malException();
                }

                AirportInterface airport = new AirportDW(words[0], words[1], Float.parseFloat(words[2]), Float.parseFloat(words[3]));
                airportsTable.put(words[0], airport);
                graph.insertNode(airport);
            }
            else if (line.contains("->")) { // an edge, contains "->"
                line = line.replaceAll("\\s", ""); // remove all spaces
                line = line.replaceAll("\\[", ""); // remove all spaces
                String[] words = line.split("->");
                if (words.length != 2) {
                    in.close();
                    this.malException();
                }
                String start = words[0];
                words = words[1].split("len=");
                if (words.length != 2) {
                    in.close();
                    this.malException();
                }
                String end = words[0];
                words = words[1].split("]");
                if (words.length != 2) {
                    in.close();
                    this.malException();
                }
                String dist = words[0];
                AirportInterface airport1 = airportsTable.get(start);
                AirportInterface airport2 = airportsTable.get(end);
                Double distance = Double.parseDouble(dist);
                graph.insertEdge(airport1, airport2, distance);
            }
            else {
                in.close();
                this.malException();
            }
        }

        // then close the scanner before returning the list of posts
        in.close();
        return graph;
    }

    private void malException(){
        System.out.println("The data is malformed or Wrong file was opened\n");
        System.out.println("Please try p3Small.csv or p3Mid.csv or p3Large.csv\n");
        throw new IllegalArgumentException("The data is malformed or Wrong file was opened");
    }
}
